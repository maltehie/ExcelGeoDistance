// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const office_addin_cli_1 = require("office-addin-cli");
const generateMetadata = require("./generate");
function generate(inputFile, outputFile) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            if (!inputFile) {
                throw new Error("You need to provide the path to the source file for custom functions.");
            }
            if (!outputFile) {
                throw new Error("You need to provide the path to the output file for the custom functions metadata.");
            }
            const results = yield generateMetadata.generate(inputFile, outputFile);
            if (results.errors.length > 0) {
                console.error("Errors found:");
                results.errors.forEach(err => console.log(err));
            }
        }
        catch (err) {
            office_addin_cli_1.logErrorMessage(err);
        }
    });
}
exports.generate = generate;
//# sourceMappingURL=commands.js.map