// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const metadata = require("custom-functions-metadata");
const fs = require("fs");
const path = require("path");
const pluginName = "CustomFunctionsMetadataPlugin";
class CustomFunctionsMetadataPlugin {
    constructor(options) {
        this.options = options;
    }
    apply(compiler) {
        const outputPath = (compiler.options && compiler.options.output) ? compiler.options.output.path || "" : "";
        const outputFilePath = path.resolve(outputPath, this.options.output);
        const inputFilePath = path.resolve(this.options.input);
        let errors;
        let associate;
        compiler.hooks.compile.tap(pluginName, () => __awaiter(this, void 0, void 0, function* () {
            try {
                fs.mkdirSync(outputPath);
            }
            catch (err) {
                if (err.code !== "EEXIST") {
                    throw err;
                }
            }
            const generateResult = yield metadata.generate(inputFilePath, outputFilePath, true);
            errors = generateResult.errors;
            associate = generateResult.associate;
        }));
        compiler.hooks.emit.tap(pluginName, (compilation) => {
            if (errors.length > 0) {
                compilation.errors.push("Generating metadata file:" + outputFilePath);
                errors.forEach((err) => compilation.errors.push(inputFilePath + " " + err));
            }
            else {
                const stats = fs.statSync(outputFilePath);
                const content = fs.readFileSync(outputFilePath);
                compilation.assets[this.options.output] = {
                    source() { return content; },
                    size() { return stats.size; },
                };
            }
        });
        compiler.hooks.compilation.tap(pluginName, (compilation, params) => {
            compilation.moduleTemplates.javascript.hooks.render.tap(pluginName, (source, module) => {
                if (module._source && module._source._name.endsWith(inputFilePath)) {
                    associate.forEach((item) => {
                        module._source._value += `\nCustomFunctions.associate("${item.id}", ${item.functionName});`;
                    });
                }
            });
        });
    }
}
module.exports = CustomFunctionsMetadataPlugin;
//# sourceMappingURL=customfunctionsplugin.js.map